Приложение расположено в папке application.
Исходные тексты и проект для сборки в папке solution.
Исходные тексты шейдеров находятся в папке data/shaders.

==========================================

Минимальные требования: Windows 7, 50 МБ ОЗУ, видеокарта с поддержкой opengl 3.3

==========================================

В приложении происходит рендер комнаты, шара для бильярда, плоскости из зелёного сукна, небольших бортиков (для ограничения передвижения шара по столу).
Сцена освещена тремя точечными источниками освещения. Рендер положения источников опционален.

Управление приложением:
мышь - вращение камеры, приближение, удаление
wasd - управление шаром
z/x  - уменьшение/увеличение значения константы 
c/v  - уменьшение/увеличение коэффициента отражения шара
l    - включение/отключение рендера положения источников освещения
b    - включение/отключение размытия при движении
Совет: используйте английскую раскладку клавиатуры.

==========================================

Пояснения:
Для отображения комнаты происходит рендер куба с использованием кубической текстуры и записью максимального значения в буфер глубины.
Для бликов от освещения используется нормальное распределение (gaussian specular).
Для теней используются карты теней (shadow maps с применением Percentage Closer Filtering).
Рендер буфера глубины для карт происходит из положения каждого из источников освещения в направлении шара.
Для создания реалистичного отражения окружения на шаре используется техника Image-Based Lighting. Для этого сцена переводится в пространство, в котором производится вычисление вектора отражения, с помощью которого происходит получение соответствующего значения из кубической текстуры. Для шара использутеся специально подготовленная кубическая текстура.
Также применяется устранение ступенчатости (MSAA) и размытие при движении (motion blur) (опционально).

Реализована физика для перемещения шара в направлении камеры и отражения от бортиков.

==========================================

Сцена задана жёстко. Её можно изменить только через исходные файлы.
Для каждой программы используются отдельные файлы с glsl кодом.
Привязка обратных вызовов, физика и порядок отрисовки реализованы в классе engine.
Непосредственная работа с графикой обёрнута в класс graphicsSubsystem. Параметры освещения сцены заданы в классе lightSubsystem.

Используются библиотеки: 
glew, freeglut - для работы с графикой
glm - для работы с векторами, матрицами, кватернионами
glimg - для загрузки файлов изображений
