Во что хочется перепилить:
Магистерская. Демка для демонстрации магистерской. А стало быть - загрузка один раз - на входе (возможно, что-то догружать, но никакой динамической подгрузки-отгрузки, хотя можно и заплить для простоты)
ВОЗМОЖНО... только возможно, задачу поможет решить vulkan - нет
Двойная пирамида отсечения для отрезания октодерева


Что плохо сейчас:
В sceneObjects в деструкторах проблема.
Отсутствует конфиг, слишком много хардкода. (конфиг должен лежать отдельно - XML или JSON)
Отсутствует кастомный загрузчик чего-либо. (Вариант - брать сцену из конфига и грузить)
Много использования стринговых контейнеров
Логика не до конца очевидна (думаю, было бы круто, если бы было понятно, что делает программа на протяжении её трейсинга)
Много повторяющегося кода (по крайней мере в графике) - нужны специальные классы, но тогда может понадобиться система батчинга - или ручная система анализа шейдера, что не очень круто; возможно, это можно сделать просто получая типичные праметры для всех, и в крайнем случае получать ошибку, что такого параметра нет
функция draw в sceneObjects - подумать над этим
вероятно, из-за того, что текстура тени клэмпится - происходит баг с тенью при сжатии окна (может придумать что-то получше), но скорее всего из-за размеров окна (при рендере теней нужно будет менять матрицы проекции и вообще задавать свои значения)
std::map<GLenum, std::map<std::string, GLuint> > programUniforms; - если GLenum - это номер программы, то стоит изменить на GLuint
GraphicsSubsystem::shadowMapPass(const Mesh *target, LightSubsystem &lss) - название target смущает 
отдельные функции используют внутреннее знание о доступах к памяти (например GraphicsSubsystem::setCam() или Engine::drawHandler())
А чё бы и Engine не сделать обычным синглтоном (чем он по сути и является) (посмотреть доку по синглтонам)
небезопасный код

Что нужно сделать:
WinApi интерфейс с возможностью менять там параметры всякие. (Придётся избавляться от удобненьких функций глут-окна, которое всё хэндлит, но можно всё посмотреть в исходниках freeglut_main.c) - не приоритетно
Возможно, стоит упростить классы (выделить слабосвязные логические единицы в отдельные классы). В основном - разобрать класс графики. - приоритетно
Выписать архитектуру - будет полезно для будущего.
Подобие ресурсной системы в целом есть, нужно только правильно вылепить.
Выделить понятия рендертаргетов
Сделать из этой штуки полноценную платформу для различного рода сцен

